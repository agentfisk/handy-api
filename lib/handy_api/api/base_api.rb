=begin
#Handy API v2.0.0

#API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->

The version of the OpenAPI document: 2.0.0-beta-3
Contact: lars@sweettech.no
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'cgi'

module HandyAPI
  class BASEApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get extended device information.
    # Returns information about the device; hardware version, firmware version, firmware status, firmware branch and device model.<br><br> The most important information returned is the firmware status value (fwStatus).<br> Depending on the value the device may or may not need an update for the device to work with your service.<br><br> The following values are possible: <ul> <li>UP_TO_DATE(0) - The device is running the latest available firmware. No action required for using your service.</li> <li>UPDATE_REQUIRED(1) - The device is running an out-of-date firmware version. An update is required before the device will work with your service.</li> <li>UPDATE_AVAILABLE(2) - The device is running a firmware with available updates. The update is not stricly neccessary for the device to work with your service, but the update might improve the user experience.</li> </ul> Whenever the firmware status is not UP_TO_DATE(0), it's recommended that you forward the user to <a href=\"https://www.handyfeeeling.com\">https://www.handyfeeeling.com</a> so the user can easily update their device.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [GetInfo200Response]
    def get_info(x_connection_key, opts = {})
      data, _status_code, _headers = get_info_with_http_info(x_connection_key, opts)
      data
    end

    # Get extended device information.
    # Returns information about the device; hardware version, firmware version, firmware status, firmware branch and device model.&lt;br&gt;&lt;br&gt; The most important information returned is the firmware status value (fwStatus).&lt;br&gt; Depending on the value the device may or may not need an update for the device to work with your service.&lt;br&gt;&lt;br&gt; The following values are possible: &lt;ul&gt; &lt;li&gt;UP_TO_DATE(0) - The device is running the latest available firmware. No action required for using your service.&lt;/li&gt; &lt;li&gt;UPDATE_REQUIRED(1) - The device is running an out-of-date firmware version. An update is required before the device will work with your service.&lt;/li&gt; &lt;li&gt;UPDATE_AVAILABLE(2) - The device is running a firmware with available updates. The update is not stricly neccessary for the device to work with your service, but the update might improve the user experience.&lt;/li&gt; &lt;/ul&gt; Whenever the firmware status is not UP_TO_DATE(0), it&#39;s recommended that you forward the user to &lt;a href&#x3D;\&quot;https://www.handyfeeeling.com\&quot;&gt;https://www.handyfeeeling.com&lt;/a&gt; so the user can easily update their device.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetInfo200Response, Integer, Hash)>] GetInfo200Response data, response status code and response headers
    def get_info_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.get_info ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.get_info"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_info, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_info, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.get_info, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/info'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetInfo200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.get_info",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the current mode of the device.
    # Get the current mode of the device.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param [Hash] opts the optional parameters
    # @return [GetMode200Response]
    def get_mode(x_connection_key, opts = {})
      data, _status_code, _headers = get_mode_with_http_info(x_connection_key, opts)
      data
    end

    # Get the current mode of the device.
    # Get the current mode of the device.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMode200Response, Integer, Hash)>] GetMode200Response data, response status code and response headers
    def get_mode_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.get_mode ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.get_mode"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_mode, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_mode, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^(cid:?:)?[a-zA-Z0-9\/+]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.get_mode, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/mode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.get_mode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#get_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extended device settings.
    # Get various device settings.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [GetSettings200Response]
    def get_settings(x_connection_key, opts = {})
      data, _status_code, _headers = get_settings_with_http_info(x_connection_key, opts)
      data
    end

    # Extended device settings.
    # Get various device settings.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSettings200Response, Integer, Hash)>] GetSettings200Response data, response status code and response headers
    def get_settings_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.get_settings ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.get_settings"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_settings, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_settings, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.get_settings, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSettings200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.get_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the device status.
    # A convenient endpoint for fetching the current mode of the device and the state within the current mode.<br> For modes with a single state, the returned state value will always be 0.<br> For modes with multiple states, see the schema definition for possible values.<br>
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [GetStatus200Response]
    def get_status(x_connection_key, opts = {})
      data, _status_code, _headers = get_status_with_http_info(x_connection_key, opts)
      data
    end

    # Get the device status.
    # A convenient endpoint for fetching the current mode of the device and the state within the current mode.&lt;br&gt; For modes with a single state, the returned state value will always be 0.&lt;br&gt; For modes with multiple states, see the schema definition for possible values.&lt;br&gt;
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetStatus200Response, Integer, Hash)>] GetStatus200Response data, response status code and response headers
    def get_status_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.get_status ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.get_status"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_status, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.get_status, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.get_status, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetStatus200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.get_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#get_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Check device connectivity.
    # Check if a specifc device is connected and online. This is the fastest way to check device connectivity.<br><br> If you need a continuous device connectivity check, this is the endpoint you should be using.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [ConnectedResponse]
    def is_connected(x_connection_key, opts = {})
      data, _status_code, _headers = is_connected_with_http_info(x_connection_key, opts)
      data
    end

    # Check device connectivity.
    # Check if a specifc device is connected and online. This is the fastest way to check device connectivity.&lt;br&gt;&lt;br&gt; If you need a continuous device connectivity check, this is the endpoint you should be using.
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectedResponse, Integer, Hash)>] ConnectedResponse data, response status code and response headers
    def is_connected_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.is_connected ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.is_connected"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.is_connected, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.is_connected, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.is_connected, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/connected'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectedResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.is_connected",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#is_connected\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set the current mode of the device.
    # Set the current mode of the device.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param mode_update [ModeUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [SetMode200Response]
    def set_mode(x_connection_key, mode_update, opts = {})
      data, _status_code, _headers = set_mode_with_http_info(x_connection_key, mode_update, opts)
      data
    end

    # Set the current mode of the device.
    # Set the current mode of the device.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param mode_update [ModeUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetMode200Response, Integer, Hash)>] SetMode200Response data, response status code and response headers
    def set_mode_with_http_info(x_connection_key, mode_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BASEApi.set_mode ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling BASEApi.set_mode"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.set_mode, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling BASEApi.set_mode, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^(cid:?:)?[a-zA-Z0-9\/+]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling BASEApi.set_mode, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'mode_update' is set
      if @api_client.config.client_side_validation && mode_update.nil?
        fail ArgumentError, "Missing the required parameter 'mode_update' when calling BASEApi.set_mode"
      end
      # resource path
      local_var_path = '/mode'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mode_update)

      # return_type
      return_type = opts[:debug_return_type] || 'SetMode200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"BASEApi.set_mode",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BASEApi#set_mode\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
