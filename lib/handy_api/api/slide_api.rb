=begin
#Handy API v2.0.0

#API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->

The version of the OpenAPI document: 2.0.0-beta-3
Contact: lars@sweettech.no
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'cgi'

module HandyAPI
  class SLIDEApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get the current slide position
    # Get the current slide position in millimeter (mm).
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [GetPositionAbs200Response]
    def get_position_abs(x_connection_key, opts = {})
      data, _status_code, _headers = get_position_abs_with_http_info(x_connection_key, opts)
      data
    end

    # Get the current slide position
    # Get the current slide position in millimeter (mm).
    # @param x_connection_key [String] Device connection key.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPositionAbs200Response, Integer, Hash)>] GetPositionAbs200Response data, response status code and response headers
    def get_position_abs_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SLIDEApi.get_position_abs ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling SLIDEApi.get_position_abs"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.get_position_abs, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.get_position_abs, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^[a-zA-Z0-9]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling SLIDEApi.get_position_abs, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/slide/position/absolute'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetPositionAbs200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SLIDEApi.get_position_abs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SLIDEApi#get_position_abs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get the slide settings.
    # Get the slide min and max position.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param [Hash] opts the optional parameters
    # @return [GetSlide200Response]
    def get_slide(x_connection_key, opts = {})
      data, _status_code, _headers = get_slide_with_http_info(x_connection_key, opts)
      data
    end

    # Get the slide settings.
    # Get the slide min and max position.
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSlide200Response, Integer, Hash)>] GetSlide200Response data, response status code and response headers
    def get_slide_with_http_info(x_connection_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SLIDEApi.get_slide ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling SLIDEApi.get_slide"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.get_slide, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.get_slide, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^(cid:?:)?[a-zA-Z0-9\/+]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling SLIDEApi.get_slide, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/slide'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetSlide200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SLIDEApi.get_slide",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SLIDEApi#get_slide\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Set slide settings.
    # Set the slide min and max position. <p>The slide min and max position decides the range of the movement of the slide. <p> Examples: <ul> <li>Use the full range of the slide: (min=0, max=100)</li> <li>Use only the top half of the slide: (min=50, max=100)</li> <li>Use only the bottom half of the slide: (min=0, max=50)</li> </ul> <p>You can update min and max individually or set both values. <p>The fixed flag can be set to move the current min-max-range relative to a new min or max value. By setting fixed=true, the current min-max-range will be shifted relative to the new value. <ul> <li>Existing (min=0, max=30) with new value (min=20, fixed=true) => New setting: (min=20, max=50)</li> <li>Existing (min=85, max=100) with new value (max=20, fixed=true) => New setting: (min=5, max=20)</li> <li>Existing (min=60, max=100) with new value (min=0, fixed=true) => New setting: (min=0, max=40)</li> <li>Existing (min=60, max=100) with new value (max=10, fixed=true) => New setting: (min=0, max=10)</li> <li>Existing (min=60, max=100) with new value (min=80, fixed=true) => New setting: (min=80, max=100)</li> </ul> The fixed flag is ignored when both min and max are specified. <p> When updating the slide values, the device will adjust the provided values if the provided values are not legal. Typical situations where this might occur: <ul> <li>Setting the slide min value higher than the current max.</li> <li>Setting the slide max value lower than the current min.</li> <li>Setting the slide range smaller than the minimum allowed distance (max-min >= MIN_ALLOWED).</li> </ul> </p> <p> If an adjustment was needed, it will be reflected in the response result code. See <b>SlideResult</b> schema for details. </p> 
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param slide_settings [SlideSettings] 
    # @param [Hash] opts the optional parameters
    # @return [SetSlide200Response]
    def set_slide(x_connection_key, slide_settings, opts = {})
      data, _status_code, _headers = set_slide_with_http_info(x_connection_key, slide_settings, opts)
      data
    end

    # Set slide settings.
    # Set the slide min and max position. &lt;p&gt;The slide min and max position decides the range of the movement of the slide. &lt;p&gt; Examples: &lt;ul&gt; &lt;li&gt;Use the full range of the slide: (min&#x3D;0, max&#x3D;100)&lt;/li&gt; &lt;li&gt;Use only the top half of the slide: (min&#x3D;50, max&#x3D;100)&lt;/li&gt; &lt;li&gt;Use only the bottom half of the slide: (min&#x3D;0, max&#x3D;50)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You can update min and max individually or set both values. &lt;p&gt;The fixed flag can be set to move the current min-max-range relative to a new min or max value. By setting fixed&#x3D;true, the current min-max-range will be shifted relative to the new value. &lt;ul&gt; &lt;li&gt;Existing (min&#x3D;0, max&#x3D;30) with new value (min&#x3D;20, fixed&#x3D;true) &#x3D;&gt; New setting: (min&#x3D;20, max&#x3D;50)&lt;/li&gt; &lt;li&gt;Existing (min&#x3D;85, max&#x3D;100) with new value (max&#x3D;20, fixed&#x3D;true) &#x3D;&gt; New setting: (min&#x3D;5, max&#x3D;20)&lt;/li&gt; &lt;li&gt;Existing (min&#x3D;60, max&#x3D;100) with new value (min&#x3D;0, fixed&#x3D;true) &#x3D;&gt; New setting: (min&#x3D;0, max&#x3D;40)&lt;/li&gt; &lt;li&gt;Existing (min&#x3D;60, max&#x3D;100) with new value (max&#x3D;10, fixed&#x3D;true) &#x3D;&gt; New setting: (min&#x3D;0, max&#x3D;10)&lt;/li&gt; &lt;li&gt;Existing (min&#x3D;60, max&#x3D;100) with new value (min&#x3D;80, fixed&#x3D;true) &#x3D;&gt; New setting: (min&#x3D;80, max&#x3D;100)&lt;/li&gt; &lt;/ul&gt; The fixed flag is ignored when both min and max are specified. &lt;p&gt; When updating the slide values, the device will adjust the provided values if the provided values are not legal. Typical situations where this might occur: &lt;ul&gt; &lt;li&gt;Setting the slide min value higher than the current max.&lt;/li&gt; &lt;li&gt;Setting the slide max value lower than the current min.&lt;/li&gt; &lt;li&gt;Setting the slide range smaller than the minimum allowed distance (max-min &gt;&#x3D; MIN_ALLOWED).&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt; &lt;p&gt; If an adjustment was needed, it will be reflected in the response result code. See &lt;b&gt;SlideResult&lt;/b&gt; schema for details. &lt;/p&gt; 
    # @param x_connection_key [String] Device connection key or a channel reference.
    # @param slide_settings [SlideSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SetSlide200Response, Integer, Hash)>] SetSlide200Response data, response status code and response headers
    def set_slide_with_http_info(x_connection_key, slide_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SLIDEApi.set_slide ...'
      end
      # verify the required parameter 'x_connection_key' is set
      if @api_client.config.client_side_validation && x_connection_key.nil?
        fail ArgumentError, "Missing the required parameter 'x_connection_key' when calling SLIDEApi.set_slide"
      end
      if @api_client.config.client_side_validation && x_connection_key.to_s.length > 64
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.set_slide, the character length must be smaller than or equal to 64.'
      end

      if @api_client.config.client_side_validation && x_connection_key.to_s.length < 5
        fail ArgumentError, 'invalid value for "x_connection_key" when calling SLIDEApi.set_slide, the character length must be great than or equal to 5.'
      end

      pattern = Regexp.new(/^(cid:?:)?[a-zA-Z0-9\/+]{5,64}$/)
      if @api_client.config.client_side_validation && x_connection_key !~ pattern
        fail ArgumentError, "invalid value for 'x_connection_key' when calling SLIDEApi.set_slide, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'slide_settings' is set
      if @api_client.config.client_side_validation && slide_settings.nil?
        fail ArgumentError, "Missing the required parameter 'slide_settings' when calling SLIDEApi.set_slide"
      end
      # resource path
      local_var_path = '/slide'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'X-Connection-Key'] = x_connection_key

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(slide_settings)

      # return_type
      return_type = opts[:debug_return_type] || 'SetSlide200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"SLIDEApi.set_slide",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SLIDEApi#set_slide\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
