=begin
#Handy API v2.0.0

#API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->

The version of the OpenAPI document: 2.0.0-beta-3
Contact: lars@sweettech.no
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for HandyAPI::BASEApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'BASEApi' do
  before do
    # run before each test
    @api_instance = HandyAPI::BASEApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of BASEApi' do
    it 'should create an instance of BASEApi' do
      expect(@api_instance).to be_instance_of(HandyAPI::BASEApi)
    end
  end

  # unit tests for get_info
  # Get extended device information.
  # Returns information about the device; hardware version, firmware version, firmware status, firmware branch and device model.&lt;br&gt;&lt;br&gt; The most important information returned is the firmware status value (fwStatus).&lt;br&gt; Depending on the value the device may or may not need an update for the device to work with your service.&lt;br&gt;&lt;br&gt; The following values are possible: &lt;ul&gt; &lt;li&gt;UP_TO_DATE(0) - The device is running the latest available firmware. No action required for using your service.&lt;/li&gt; &lt;li&gt;UPDATE_REQUIRED(1) - The device is running an out-of-date firmware version. An update is required before the device will work with your service.&lt;/li&gt; &lt;li&gt;UPDATE_AVAILABLE(2) - The device is running a firmware with available updates. The update is not stricly neccessary for the device to work with your service, but the update might improve the user experience.&lt;/li&gt; &lt;/ul&gt; Whenever the firmware status is not UP_TO_DATE(0), it&#39;s recommended that you forward the user to &lt;a href&#x3D;\&quot;https://www.handyfeeeling.com\&quot;&gt;https://www.handyfeeeling.com&lt;/a&gt; so the user can easily update their device.
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [GetInfo200Response]
  describe 'get_info test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_mode
  # Get the current mode of the device.
  # Get the current mode of the device.
  # @param x_connection_key Device connection key or a channel reference.
  # @param [Hash] opts the optional parameters
  # @return [GetMode200Response]
  describe 'get_mode test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_settings
  # Extended device settings.
  # Get various device settings.
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [GetSettings200Response]
  describe 'get_settings test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_status
  # Get the device status.
  # A convenient endpoint for fetching the current mode of the device and the state within the current mode.&lt;br&gt; For modes with a single state, the returned state value will always be 0.&lt;br&gt; For modes with multiple states, see the schema definition for possible values.&lt;br&gt;
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [GetStatus200Response]
  describe 'get_status test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for is_connected
  # Check device connectivity.
  # Check if a specifc device is connected and online. This is the fastest way to check device connectivity.&lt;br&gt;&lt;br&gt; If you need a continuous device connectivity check, this is the endpoint you should be using.
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [ConnectedResponse]
  describe 'is_connected test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_mode
  # Set the current mode of the device.
  # Set the current mode of the device.
  # @param x_connection_key Device connection key or a channel reference.
  # @param mode_update 
  # @param [Hash] opts the optional parameters
  # @return [SetMode200Response]
  describe 'set_mode test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
