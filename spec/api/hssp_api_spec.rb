=begin
#Handy API v2.0.0

#API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->

The version of the OpenAPI document: 2.0.0-beta-3
Contact: lars@sweettech.no
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for HandyAPI::HSSPApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'HSSPApi' do
  before do
    # run before each test
    @api_instance = HandyAPI::HSSPApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of HSSPApi' do
    it 'should create an instance of HSSPApi' do
      expect(@api_instance).to be_instance_of(HandyAPI::HSSPApi)
    end
  end

  # unit tests for get_hssp_state
  # Get the HSSP state of the device.
  # Get the HSSP state of the device.
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [GetHSSPState200Response]
  describe 'get_hssp_state test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_loop_setting
  # Get the HSSP loop setting of the device. Only available in firmware &gt;&#x3D; 3.2.x
  # Get the HSSP loop setting of the device. Only available in firmware &gt;&#x3D; 3.2.x
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [GetLoopSetting200Response]
  describe 'get_loop_setting test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for hssp_stop
  # Stop script playing.
  # Stop script playing.
  # @param x_connection_key Device connection key.
  # @param [Hash] opts the optional parameters
  # @return [SetHAMPVelocityPercent200Response]
  describe 'hssp_stop test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for play
  # Start script playing.
  # Start script playing from a specified time index. &lt;p&gt;For the script and a video to be correctly synchronized, the client must provide a client-side-estimated-server-time.&lt;p&gt;See TIMESYNC for further details on how to create a good client-side-estimated-server-time.
  # @param x_connection_key Device connection key.
  # @param hssp_play 
  # @param [Hash] opts the optional parameters
  # @return [Play200Response]
  describe 'play test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for set_loop_setting
  # Set the HSSP loop setting of the device. Only available in firmware &gt;&#x3D; 3.2.x
  # If looping is enabled, the device will start replaying the script from the beginning when the end of the script is reached. Only available in firmware &gt;&#x3D; 3.2.x
  # @param x_connection_key Device connection key.
  # @param loop_setting_update 
  # @param [Hash] opts the optional parameters
  # @return [SetHAMPVelocityPercent200Response]
  describe 'set_loop_setting test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for setup
  # Setup script synchronization.
  # Setup script synchronization by providing the device with an URL from where the script can be downloaded. The device need to be able to access the URL for setup to work. &lt;p&gt;&lt;b&gt;NOTE: The maximum CSV script size that a device can handle is 524288 bytes. Script larger than this will return an error.&lt;/b&gt;&lt;/p&gt; &lt;p&gt;If the sha-256 value of the script is provided, the device will only download the script if it can not be found in the device cache.&lt;/p&gt; &lt;p&gt;See the hssp/setup response examples and the HSSPModeErrors schema for possible responses and error code descriptions.&lt;/p&gt; &lt;h2&gt;Using token URLs&lt;/h2&gt; &lt;p&gt;NOTE: This secions is only applicable for partners that have integrated with the Script API.&lt;/p&gt; &lt;p&gt;If the URL provided to the hssp/setup is a token URL, the sha-256 value is ignored. In addition, more information is available in potential error responses if the error is caused by the token.&lt;/p&gt; 
  # @param x_connection_key Device connection key.
  # @param setup 
  # @param [Hash] opts the optional parameters
  # @return [Setup200Response]
  describe 'setup test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
