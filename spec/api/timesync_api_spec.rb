=begin
#Handy API v2.0.0

#API to interact with the 'TheHandy'. <p> <b>IMPORTANT</b>: This API is compatible with devices running firmware version 3 (v3) only. See note below on how to deal with firmware version 2 (v2) devices with this API. <p> <h3>Join the community</h3> Send us a mail or add us on discord for a more technical chat - **Handy#8756**<br> Follow us on Reddit for updates and announcements: https://www.reddit.com/r/theHandy/ <p> <h3>Server selection</h3> When using the API make sure you connect to the server environment that the device you are trying to interact with is connected to.<br> For most users this will be the production environment API server: <b>https://www.handyfeeling.com/api/handy/v2</b><br> If you have been given special access to firmware that connects to the staging environment, you should use the staging environment API server: <b>https://staging.handyfeeling.com/api/handy/v2</b><br> <p> <h3>Handling firmware v2 devices</h3> Users with firmware v2 devices are required to update their device to firmware v3 before the device can be fully used with this API.<br> To ease this process, two of the endpoints in this API can be used with firmware v2 devices:<br> <ul> <li><code>/connected</code> - Check online status of a device.</li> <li><code>/info</code> - Get general information about the device.</li> </ul> All other endpoints will always return a 'Machine not connected' error if you try to use them with a firmware v2 device.<br><br> For v2 devices it's important to handle the fwStatus returned from the <code>/info</code> endpoint properly.<br> v2 devices will always have fwStatus = UPDATE_REQUIRED(2). See <code>/info</code> documentation for more details.<br><br> When using the API with a device, you should always start by verifying that the device have a firmware that is compatible with the API you are using in your service.<br> An example flow could look like this: <ol> <li>Check if device is conncted with <code>/connected</code></li> <li>Check device firmware status with <code>/info</code></li> <li>If a firmware update is required, forward the user to <a href=\"https://www.handfyfeeling.com\">https://www.handfyfeeling.com</a> so they can easily update the device firmware.</li> <li>Continue your service when the firmware status returned in <code>/info</code> is UP_TO_DATE(0).</li> </ol> <p> <h3>Mode specific operations</h3> Operations in <b>BASE</b>, <b>SLIDE</b>, <b>TIMESYNC</b> and <b>HSTP</b> are mode independent and available at any time.<br> Other operations are only available in a specific mode (eg. <b>HAMP</b>, <b>HDSP</b>, <b>HSSP</b>).<br> To access these operations, the device have to first be put in the specific mode (see <code>/mode</code>).<br> If you execute an operation not available in the current mode of the device, you will receive a 'No such method' error response. <!--See live samples of use cases here: 'https://www.handyfeeling.com/api/handy/v2/demo/ -->

The version of the OpenAPI document: 2.0.0-beta-3
Contact: lars@sweettech.no
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for HandyAPI::TIMESYNCApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'TIMESYNCApi' do
  before do
    # run before each test
    @api_instance = HandyAPI::TIMESYNCApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TIMESYNCApi' do
    it 'should create an instance of TIMESYNCApi' do
      expect(@api_instance).to be_instance_of(HandyAPI::TIMESYNCApi)
    end
  end

  # unit tests for get_server_time
  # Get current server time.
  # Provides the server time that you must use when calculating the client-server-offset (&lt;i&gt;cs_offset&lt;/i&gt;), which is used when calculating a client-side-estimated-server-time (&lt;i&gt;Tcest&lt;/i&gt;).&lt;br&gt;&lt;br&gt; &lt;h2&gt;Client-server-offset&lt;/h2&gt; The client-server-offset (&lt;i&gt;cs_offset&lt;/i&gt;) can be calculated the following way: &lt;br&gt; &lt;ol&gt; &lt;li&gt;Collect X server time (&lt;i&gt;Ts&lt;/i&gt;) samples using this endpoint. A higher number of samples will results in longer estimation time but a more accurate result. A good sample size is 30 (X &#x3D; 30).&lt;/li&gt; &lt;li&gt;Track the round-trip-delay (&lt;i&gt;RTD&lt;/i&gt;) for each sample by recording the request send time (&lt;i&gt;Tsend&lt;/i&gt;) and response received time (&lt;i&gt;Treceive&lt;/i&gt;). Calculate &lt;i&gt;RTD &#x3D; Treceive â€“ Tsend&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;Calculate the estimated server time when the response is received (&lt;i&gt;Ts_est&lt;/i&gt;) by adding half the RTD time to the received server time value (&lt;i&gt;Ts&lt;/i&gt;). &lt;i&gt;Ts_est  &#x3D; Ts + RTD/2&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;Calculate the offset between estimated server time (&lt;i&gt;Ts_est&lt;/i&gt;) and client time (&lt;i&gt;Tc&lt;/i&gt;). Upon receive &lt;i&gt;Tc &#x3D;&#x3D; Treceive&lt;/i&gt; &#x3D;&gt; &lt;i&gt;offset &#x3D; Ts_est  - Treceive&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;Add the offset to the aggregated offset value (&lt;i&gt;offset_agg&lt;/i&gt;).  &lt;i&gt;offset_agg &#x3D; offset_agg + offset&lt;/i&gt;.&lt;/li&gt; &lt;li&gt;When all samples have been received calculate the average offset (&lt;i&gt;cs_offset&lt;/i&gt;) by dividing aggregated offset (&lt;i&gt;offset_agg&lt;/i&gt;) values by the number of samples (X). &lt;i&gt;cs_offset &#x3D; offset_agg / X&lt;/i&gt;&lt;/li&gt; &lt;/ol&gt; The process above gives you a good estimate of the client-server-offset (&lt;i&gt;cs_offset&lt;/i&gt;).&lt;br&gt;&lt;br&gt; Normally you calculate the &lt;i&gt;cs_offset&lt;/i&gt; once, and use it whenever you need to calculate client-side-estimated-server-time (&lt;i&gt;Tcest&lt;/i&gt;).&lt;br&gt; However, if the synchronization between device and the service (eg. video/script synchronization) is off (maybe due to changing network topology, clock drift, bad initial calculation, etc.), it might help to re-calculate the &lt;i&gt;cs_offset&lt;/i&gt;. &lt;h2&gt;Client-side-estimated-server-time&lt;/h2&gt; The client-side-estimated-server-time (&lt;i&gt;Tcest&lt;/i&gt;) value is required in some of the API endpoints (eg. /hssp/play).&lt;br&gt;&lt;br&gt; The &lt;i&gt;Tcest&lt;/i&gt; is calculated the following way:&lt;br&gt;&lt;br&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i&gt;Tcest &#x3D; Tc + cs_offset&lt;/i&gt;&lt;br&gt;&lt;br&gt; where &lt;i&gt;Tc&lt;/i&gt; is the current client time and &lt;i&gt;cs_offset&lt;/i&gt; is the client-server-offset.
  # @param [Hash] opts the optional parameters
  # @return [ServerTimeResponse]
  describe 'get_server_time test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
